--- a/src/sm/src/sm_client_report.c
+++ b/src/sm/src/sm_client_report.c
@@ -792,7 +792,7 @@ bool sm_client_report_send(
         ds_dlist_insert_tail(report_list, report_entry);
     }
 
-    LOG(INFO,
+    LOG(DEBUG,
         "Sending %s client report at '%s'",
         radio_get_name_from_cfg(radio_cfg_ctx),
         sm_timestamp_ms_to_date(report_ctx->timestamp_ms));
--- a/src/sm/src/sm_neighbor_report.c
+++ b/src/sm/src/sm_neighbor_report.c
@@ -390,7 +390,7 @@ bool sm_neighbor_report_send_diff(
         }
     }
 
-    LOGI("Sending %s %s neighbor report at '%s'",
+    LOGD("Sending %s %s neighbor report at '%s'",
          radio_get_name_from_cfg(radio_cfg_ctx),
          radio_get_scan_name_from_type(scan_type),
          sm_timestamp_ms_to_date(report_diff.timestamp_ms));
@@ -503,7 +503,7 @@ bool sm_neighbor_report_send_raw(
              neighbor_entry->chan);
     }
 
-    LOGI("Sending %s %s neighbor report at '%s'",
+    LOGD("Sending %s %s neighbor report at '%s'",
          radio_get_name_from_cfg(radio_cfg_ctx),
          radio_get_scan_name_from_type(scan_type),
          sm_timestamp_ms_to_date(report_ctx->timestamp_ms));
--- a/src/sm/src/sm_capacity_report.c
+++ b/src/sm/src/sm_capacity_report.c
@@ -288,7 +288,7 @@ bool sm_capacity_report_send(
         }
     }
 
-    LOG(INFO,
+    LOG(DEBUG,
         "Sending %s capacity report at '%s'",
         radio_get_name_from_cfg(radio_cfg_ctx),
         sm_timestamp_ms_to_date(report_ctx->timestamp_ms));
--- a/src/sm/src/sm_device_report.c
+++ b/src/sm/src/sm_device_report.c
@@ -219,14 +219,14 @@ void sm_device_report (EV_P_ ev_timer *w
         request_ctx->reporting_timestamp - device_ctx->report_ts +
         get_timestamp();
 
-    LOG(INFO,
+    LOG(DEBUG,
         "uptime=%u, mem=%u/%u, cpu=%u",
         report_ctx->record.uptime,
         report_ctx->record.mem_util.mem_used,
         report_ctx->record.mem_util.mem_total,
         report_ctx->record.cpu_util.cpu_util);
 
-    LOG(INFO,
+    LOG(DEBUG,
         "Sending device report at '%s'",
         sm_timestamp_ms_to_date(report_ctx->timestamp_ms));
 
@@ -345,7 +345,7 @@ bool sm_device_report_request(
         memset(request_ctx, 0, sizeof(*request_ctx));
         memset(report_ctx, 0, sizeof(*report_ctx));
 
-        LOG(INFO,
+        LOG(DEBUG,
             "Initializing device reporting");
 
         /* Initialize report device temp list */
--- a/src/sm/src/sm_network_probe_report.c
+++ b/src/sm/src/sm_network_probe_report.c
@@ -188,7 +188,7 @@ void sm_network_probe_report (EV_P_ ev_t
         request_ctx->reporting_timestamp - network_probe_ctx->report_ts +
         get_timestamp();
 
-    LOG(INFO,
+    LOG(DEBUG,
         "Sending network probe report at '%s' , latency : '%d'",
         sm_timestamp_ms_to_date(report_ctx->timestamp_ms), report_ctx->record.dns_probe.latency);
 
--- a/src/sm/src/sm_rssi_report.c
+++ b/src/sm/src/sm_rssi_report.c
@@ -514,7 +514,7 @@ bool sm_rssi_report_send(
         }
     }
 
-    LOGI("Sending %s rssi report at '%s'",
+    LOGD("Sending %s rssi report at '%s'",
          radio_get_name_from_cfg(radio_cfg_ctx),
          sm_timestamp_ms_to_date(report_ctx->timestamp_ms));
 
--- a/src/sm/src/sm_survey_report.c
+++ b/src/sm/src/sm_survey_report.c
@@ -592,7 +592,7 @@ bool sm_survey_report_send(
             goto exit;
     }
 
-    LOGI("Sending %s %s survey report at '%s'",
+    LOGD("Sending %s %s survey report at '%s'",
          radio_get_name_from_cfg(radio_cfg_ctx),
          radio_get_scan_name_from_type(scan_type),
          sm_timestamp_ms_to_date(report_ctx->timestamp_ms));
@@ -979,7 +979,7 @@ bool sm_survey_threshold_util_cb (
          survey_ctx->threshold_count, request_ctx->radio_chan_list.chan_num);
 
     if (threshold_util >= request_ctx->threshold_util) {
-        LOGI("Skip processing %s %s survey (threshold util exceeded %d >= %d)",
+        LOGD("Skip processing %s %s survey (threshold util exceeded %d >= %d)",
              radio_get_name_from_cfg(radio_cfg_ctx),
              radio_get_scan_name_from_type(scan_type),
              threshold_util,
@@ -1103,7 +1103,7 @@ bool sm_survey_stats_update (
             scan_interval = SURVEY_MIN_SCAN_INTERVAL;
 
             // always scan if max_delay exceeded
-            LOGI("Force processing %s %s survey delay: %ld/%d count: %d/%d",
+            LOGD("Force processing %s %s survey delay: %ld/%d count: %d/%d",
                  radio_get_name_from_cfg(radio_cfg_ctx),
                  radio_get_scan_name_from_type(scan_type),
                  survey_ctx->threshold_time_delta, request_ctx->threshold_max_delay,
@@ -1771,7 +1771,7 @@ bool sm_survey_stats_process (
                     request_ctx->threshold_pod_num * request_ctx->sampling_interval;
             }
 
-            LOGI("Updated %s %s survey threshold_max_delay (%d + %d) * %d) -> %ds) ",
+            LOGD("Updated %s %s survey threshold_max_delay (%d + %d) * %d) -> %ds) ",
                  radio_get_name_from_cfg(radio_cfg_ctx),
                  radio_get_scan_name_from_type(scan_type),
                  request_ctx->threshold_pod_num,
@@ -1790,7 +1790,7 @@ bool sm_survey_stats_process (
                 request_ctx->sampling_interval -
                 (uint32_t)((request_ctx->reporting_timestamp / 1000) % request_ctx->sampling_interval);
 
-            LOGI("Updated %s %s survey synchronization_delay %d - %d -> %"PRIu64"s) ",
+            LOGD("Updated %s %s survey synchronization_delay %d - %d -> %"PRIu64"s) ",
                  radio_get_name_from_cfg(radio_cfg_ctx),
                  radio_get_scan_name_from_type(scan_type),
                  request_ctx->sampling_interval,
--- a/src/wm2/src/wm2_radio.c
+++ b/src/wm2/src/wm2_radio.c
@@ -137,7 +137,7 @@ wm2_delayed(void (*fn)(const char *ifnam
     ev_timer_init(&i->timer, wm2_delayed_cb, seconds, 0);
     ev_timer_start(EV_DEFAULT, &i->timer);
     ds_dlist_insert_tail(&delayed_list, i);
-    LOGI("%s: scheduling delayed (%us) work %s", ifname, seconds, workname);
+    LOGD("%s: scheduling delayed (%us) work %s", ifname, seconds, workname);
 }
 
 #define wm2_delayed_recalc(fn, ifname) (wm2_delayed((fn), (ifname), WM2_RECALC_DELAY_SECONDS, #fn))
@@ -267,7 +267,7 @@ wm2_parent_change(void)
 static void
 wm2_dfs_disconnect_check(const char *ifname, bool force)
 {
-    LOGN("%s %s called", ifname, __func__);
+    LOGD("%s %s called", ifname, __func__);
     wm2_parent_change();
 }
 
@@ -286,7 +286,7 @@ wm2_sta_has_dfs_channel(const struct sch
         if (rstate->channel != atoi(rstate->channels_keys[i]))
             continue;
 
-        LOGI("%s: check channel %d (%d) %s", vstate->if_name, rstate->channel, vstate->channel, rstate->channels[i]);
+        LOGD("%s: check channel %d (%d) %s", vstate->if_name, rstate->channel, vstate->channel, rstate->channels[i]);
         if (!strstr(rstate->channels[i], "allowed"))
             status = true;
 
@@ -319,7 +319,7 @@ wm2_sta_handle_dfs_link_change(const str
 
     if (wm2_sta_has_disconnected(oldstate, newstate) &&
         wm2_sta_has_dfs_channel(rstate, oldstate)) {
-            LOGN("%s: sta: dfs: disconnected from %s - arm fallback parents timer", oldstate->if_name, oldstate->parent);
+            LOGD("%s: sta: dfs: disconnected from %s - arm fallback parents timer", oldstate->if_name, oldstate->parent);
             wm2_timer(wm2_dfs_disconnect_check, oldstate->if_name, WM2_DFS_FALLBACK_GRACE_PERIOD_SECONDS);
     }
 }
@@ -923,13 +923,13 @@ wm2_vconf_recalc(const char *ifname, boo
 
     wm2_radio_update_port_state(vconf.if_name);
 
-    LOGI("%s@%s: changed, configuring", ifname, rconf.if_name);
+    LOGD("%s@%s: changed, configuring", ifname, rconf.if_name);
 
     if (vchanged.parent)
-        LOGN("%s: topology change: parent '%s' -> '%s'", ifname, vstate.parent, vconf.parent);
+        LOGD("%s: topology change: parent '%s' -> '%s'", ifname, vstate.parent, vconf.parent);
 
     if (vchanged.ssid && strlen(vconf.ssid) > 0 && !strcmp(vconf.mode, "sta"))
-        LOGN("%s: topology change: ssid '%s' -> '%s'", ifname, vstate.ssid, vconf.ssid);
+        LOGD("%s: topology change: ssid '%s' -> '%s'", ifname, vstate.ssid, vconf.ssid);
 
     if (!target_vif_config_set2(&vconf, &rconf, cconfs, &vchanged, num_cconfs)) {
         LOGW("%s: failed to configure, will retry later", ifname);
@@ -1047,7 +1047,7 @@ wm2_rconf_recalc_fixup_channel(struct sc
      * i.e. when radio_config channel is more important than
      * sta vif channel in cases of sta csa, sta (re)assoc.
      */
-    LOGN("%s: ignoring channel change %d -> %d because sta vif %s is connected on %d, see CAES-600",
+    LOGD("%s: ignoring channel change %d -> %d because sta vif %s is connected on %d, see CAES-600",
             rconf->if_name, rstate->channel, rconf->channel,
             vstate.if_name, vstate.channel);
     rconf->channel = vstate.channel;
@@ -1146,10 +1146,10 @@ wm2_rconf_recalc(const char *ifname, boo
     if (!wm2_rconf_changed(&rconf, &rstate, &changed) && !force)
         goto recalc;
 
-    LOGI("%s: changed, configuring", ifname);
+    LOGD("%s: changed, configuring", ifname);
 
     if ((changed.channel || changed.ht_mode) && rconf.channel) {
-        LOGN("%s: topology change: channel %d @ %s -> %d @ %s",
+        LOGD("%s: topology change: channel %d @ %s -> %d @ %s",
              ifname,
              rstate.channel, rstate.ht_mode,
              rconf.channel, rconf.ht_mode);
@@ -1183,7 +1183,7 @@ wm2_op_vconf(const struct schema_Wifi_VI
     memcpy(&tmp, vconf, sizeof(tmp));
     memset(&rconf, 0, sizeof(rconf));
 
-    LOGI("%s @ %s: updating vconf", vconf->if_name, phy);
+    LOGD("%s @ %s: updating vconf", vconf->if_name, phy);
     REQUIRE(vconf->if_name, strlen(vconf->if_name) > 0);
     REQUIRE(vconf->if_name, vconf->_partial_update);
     if (!(where = ovsdb_where_simple(SCHEMA_COLUMN(Wifi_Radio_Config, if_name), phy)))
@@ -1203,7 +1203,7 @@ wm2_op_vconf(const struct schema_Wifi_VI
                                                            SCHEMA_TABLE(Wifi_Radio_Config),
                                                            where,
                                                            SCHEMA_COLUMN(Wifi_Radio_Config, vif_configs)));
-    LOGI("%s @ %s: updated vconf", vconf->if_name, phy);
+    LOGD("%s @ %s: updated vconf", vconf->if_name, phy);
     wm2_delayed_recalc(wm2_vconf_recalc, vconf->if_name);
 }
 
@@ -1212,14 +1212,14 @@ wm2_op_rconf(const struct schema_Wifi_Ra
 {
     struct schema_Wifi_Radio_Config tmp;
     memcpy(&tmp, rconf, sizeof(tmp));
-    LOGI("%s: updating rconf", rconf->if_name);
+    LOGD("%s: updating rconf", rconf->if_name);
     REQUIRE(rconf->if_name, strlen(rconf->if_name) > 0);
     REQUIRE(rconf->if_name, rconf->_partial_update);
     OVERRIDE(rconf->if_name, tmp.vif_configs_present, false);
     tmp.vif_configs_len = 0;
     tmp.vif_configs_present = true;
     REQUIRE(rconf->if_name, 1 == ovsdb_table_upsert_f(&table_Wifi_Radio_Config, &tmp, false, NULL));
-    LOGI("%s: updated rconf", rconf->if_name);
+    LOGD("%s: updated rconf", rconf->if_name);
     wm2_delayed_recalc(wm2_rconf_recalc, rconf->if_name);
 }
 
--- a/src/xm/src/xm_ovsdb.c
+++ b/src/xm/src/xm_ovsdb.c
@@ -91,7 +91,7 @@ static bool xm_device_info_update(const
 
     if (ovsdb_table_upsert_f(&table_AWLAN_Node, &node, false, NULL))
     {
-        LOGI("External: Updated device info");
+        LOGD("External: Updated device info");
     }
     else
     {
@@ -127,7 +127,7 @@ static bool xm_mode_update(const connect
 
     if (ovsdb_table_upsert_f(&table_AWLAN_Node, &node, false, NULL))
     {
-        LOGI("External: Updated device mode");
+        LOGD("External: Updated device mode");
     }
     else
     {
@@ -150,7 +150,7 @@ static bool xm_address_update(const char
     SCHEMA_SET_STR(node.redirector_addr, cloud_address);
     if (ovsdb_table_upsert_f(&table_AWLAN_Node, &node, false, NULL))
     {
-        LOGI("External: Updated cloud address");
+        LOGD("External: Updated cloud address");
     }
     else
     {
@@ -165,11 +165,11 @@ static bool xm_radio_update(const struct
     struct schema_Wifi_Radio_Config tmp;
 
     memcpy(&tmp, rconf, sizeof(tmp));
-    LOGI("External: Updating radio %s (partial %d)", tmp.if_name, rconf->_partial_update);
+    LOGD("External: Updating radio %s (partial %d)", tmp.if_name, rconf->_partial_update);
     REQUIRE(rconf->if_name, strlen(rconf->if_name) > 0);
     tmp.vif_configs_present = false;
     REQUIRE(rconf->if_name, 1 == ovsdb_table_upsert_f(&table_Wifi_Radio_Config, &tmp, false, NULL));
-    LOGI("External: Update radio %s", tmp.if_name);
+    LOGD("External: Update radio %s", tmp.if_name);
 
     return true;
 }
@@ -181,10 +181,10 @@ static bool xm_vif_update(const struct s
     json_t *where;
 
     memcpy(&tmp, vconf, sizeof(tmp));
-    LOGI("External: Updating vif %s @ %s (partial %d)", vconf->if_name, radio_ifname, vconf->_partial_update);
+    LOGD("External: Updating vif %s @ %s (partial %d)", vconf->if_name, radio_ifname, vconf->_partial_update);
     REQUIRE(vconf->if_name, strlen(vconf->if_name) > 0);
     if (!(where = ovsdb_where_simple(SCHEMA_COLUMN(Wifi_Radio_Config, if_name), radio_ifname))){
-        LOGI("External: Updating vif %s @ %s (no radio found)", vconf->if_name, radio_ifname);
+        LOGD("External: Updating vif %s @ %s (no radio found)", vconf->if_name, radio_ifname);
         return false;
     }
     REQUIRE(vconf->if_name,
@@ -198,7 +198,7 @@ static bool xm_vif_update(const struct s
                     where,
                     SCHEMA_COLUMN(Wifi_Radio_Config, vif_configs))
     );
-    LOGI("External: Update vif %s @ %s", vconf->if_name, radio_ifname);
+    LOGD("External: Update vif %s @ %s", vconf->if_name, radio_ifname);
 
     return true;
 }
@@ -208,10 +208,10 @@ static bool xm_inet_update(const struct
     struct schema_Wifi_Inet_Config tmp;
 
     memcpy(&tmp, iconf, sizeof(tmp));
-    LOGI("External: Updating inet %s (partial %d)", tmp.if_name, iconf->_partial_update);
+    LOGD("External: Updating inet %s (partial %d)", tmp.if_name, iconf->_partial_update);
     REQUIRE(iconf->if_name, strlen(iconf->if_name) > 0);
     REQUIRE(iconf->if_name, 1 == ovsdb_table_upsert_f(&table_Wifi_Inet_Config, &tmp, false, NULL));
-    LOGI("External: Update inet %s", tmp.if_name);
+    LOGD("External: Update inet %s", tmp.if_name);
 
     return true;
 }
--- a/src/qm/src/qm_mqtt.c
+++ b/src/qm/src/qm_mqtt.c
@@ -221,7 +221,7 @@ bool qm_mqtt_publish(mosqev_t *mqtt, qm_
         mlen = len;
         mbuf = buf;
     }
-    LOGI("MQTT: Publishing %ld bytes", mlen);
+    LOGD("MQTT: Publishing %ld bytes", mlen);
     ret = mosqev_publish(mqtt, NULL, topic, mlen, mbuf, qos, false);
 exit:
     if (buf) free(buf);
@@ -314,7 +314,7 @@ first:
         void *buf = malloc(size);
         if (!buf) goto out;
         size = sts__report__pack(rpt, buf);
-        LOGI("merged reports stats %zd + %zd = %d", rep->size, qi->size, size);
+        LOGD("merged reports stats %zd + %zd = %d", rep->size, qi->size, size);
 
         // replace message
         if(rep->buf) free(rep->buf);
